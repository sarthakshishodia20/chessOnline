<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Custom Chess Game</title>
  <style>
    .chessboard {
      display: grid;
      border-left:20px solid black;
      border-right:20px solid black;
      border-top:20px solid black;
      border-bottom:20px solid black;
      grid-template-columns: repeat(8, minmax(0, 1fr));
      grid-template-rows: repeat(8, minmax(0, 1fr));
      width: 600px;
      height: 600px;
      transition: transform 0.3s ease;
      position: relative;
    }

    .square {
      display: flex;
      align-items: center;
      justify-content: center;
      position: relative;
    }

    .square.light {
      background-color: #cce6ff;
    }

    .square.dark {
      background-color: #004080;
    }

    .highlight {
      background-color:rgb(170, 147, 107)  !important;
      border:7px solid rgb(244, 244, 244);
      border-radius: 5%;
      
    }

    .piece.white {
      color: white;
      filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
    }

    .piece.black {
      color: black;
    }

    .piece.black-pawn {
      color: black;
      filter: drop-shadow(0 0 2px rgba(0, 0, 0, 1));
    }

    .flipped {
      transform: rotate(180deg);
    }

    .piece {
      font-size: 48px;
      cursor: pointer;
      transition: transform 0.2s ease;
    }

    .piece:active {
      transform: scale(1.3);
    }

    .flipped .piece {
      transform: rotate(180deg);
    }

    .status-bar {
      color: white;
      font-size: 24px;
      margin-bottom: 10px;
    }

    .heading {
      font-size: 32px;
      color: white;
      margin-bottom: 20px;
      font-weight: bold;
    }
  </style>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div class="w-full h-screen flex flex-col items-center justify-center bg-zinc-900">
    <div class="heading">♟️ Custom Chess Game ♞</div>
    <div id="status" class="status-bar"></div>
    <div class="chessboard"></div>
  </div>

  <script src="https://cdn.socket.io/4.8.1/socket.io.min.js" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>
    const socket = io();
    const chess = new Chess();
    const boardElement = document.querySelector(".chessboard");
    const statusElement = document.getElementById("status");

    let draggedPiece = null;
    let sourceSquare = null;
    let playerRole = null;

    const getPieceUnicode = (piece) => {
      const unicodePieces = {
        wp: "♙", bp: "♟",
        wr: "♖", br: "♜",
        wn: "♘", bn: "♞",
        wb: "♗", bb: "♝",
        wq: "♕", bq: "♛",
        wk: "♔", bk: "♚",
      };
      return unicodePieces[piece] || "";
    };

    const renderBoard = () => {
      const board = chess.board();
      boardElement.innerHTML = "";

      if (playerRole === 'b') {
        boardElement.classList.add("flipped");
        statusElement.innerText = "Black to Play ↓";
      } else if (playerRole === 'w') {
        boardElement.classList.remove("flipped");
        statusElement.innerText = "White to Play ↓";
      } else {
        statusElement.innerText = "Spectating...";
      }

      board.forEach((row, rowIndex) => {
        row.forEach((square, colIndex) => {
          const squareElement = document.createElement("div");
          squareElement.classList.add("square", (rowIndex + colIndex) % 2 === 0 ? "light" : "dark");
          squareElement.dataset.row = rowIndex;
          squareElement.dataset.col = colIndex;

          if (square) {
            const pieceElement = document.createElement("div");
            const pieceCode = square.color + square.type;

            // Apply special styling for black pawns
            if (square.color === "b" && square.type === "p") {
              pieceElement.classList.add("piece", "black-pawn");
            } else {
              pieceElement.classList.add("piece", square.color === "w" ? "white" : "black");
            }

            pieceElement.innerText = getPieceUnicode(pieceCode);
            pieceElement.draggable = playerRole === square.color;

            pieceElement.addEventListener("dragstart", (e) => {
              draggedPiece = pieceElement;
              sourceSquare = { row: rowIndex, col: colIndex };
              highlightMoves(sourceSquare);
              e.dataTransfer.setData("text/plain", "");
            });

            pieceElement.addEventListener("dragend", () => {
              draggedPiece = null;
              sourceSquare = null;
              clearHighlights();
            });

            squareElement.appendChild(pieceElement);
          }

          squareElement.addEventListener("dragover", (e) => {
            e.preventDefault();
          });

          squareElement.addEventListener("drop", (e) => {
            e.preventDefault();
            if (draggedPiece) {
              const targetSquare = {
                row: parseInt(squareElement.dataset.row),
                col: parseInt(squareElement.dataset.col),
              };
              handleMove(sourceSquare, targetSquare);
              clearHighlights();
            }
          });

          boardElement.appendChild(squareElement);
        });
      });
    };

    const clearHighlights = () => {
      document.querySelectorAll('.highlight').forEach(el => el.classList.remove('highlight'));
    };

    const highlightMoves = (source) => {
      const from = `${String.fromCharCode(97 + source.col)}${8 - source.row}`;
      const moves = chess.moves({ square: from, verbose: true });
      moves.forEach(move => {
        const col = move.to.charCodeAt(0) - 97;
        const row = 8 - parseInt(move.to[1]);
        const square = document.querySelector(`[data-row='${row}'][data-col='${col}']`);
        if (square) square.classList.add("highlight");
      });
    };

    const handleMove = (source, target) => {
      const move = {
        from: `${String.fromCharCode(97 + source.col)}${8 - source.row}`,
        to: `${String.fromCharCode(97 + target.col)}${8 - target.row}`,
        promotion: "q",
      };
      socket.emit("move", move);
    };

    socket.on("playerRole", (role) => {
      playerRole = role;
      renderBoard();
    });

    socket.on("spectatorRole", () => {
      playerRole = null;
      renderBoard();
    });

    socket.on("boardState", (fen) => {
      chess.load(fen);
      renderBoard();
    });

    socket.on("move", (move) => {
      chess.move(move);
      renderBoard();

      if (chess.game_over()) {
        setTimeout(() => {
          const winner = chess.turn() === 'w' ? 'Black' : 'White';
          statusElement.innerText = `${winner} wins!`;
          chess.reset();
          socket.emit("requestRole");
        }, 500);
      }
    });

    document.addEventListener("DOMContentLoaded", () => {
      chess.reset();
      socket.emit("requestRole");
    });
  </script>
</body>
</html>